using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp6
{
    class Program
    {
        static ArrayList numeri_letti;
        static ArrayList operatori;
        static char op;
        static char op2;
        static char op3;
        static char op_el;
        static char op2_el;
        static char op3_el;
        static string read = "";
        static string number = "";
        static double risultato;
        static double primo;
        static double temp;
        static double temp2;
        static string primo_el;
        static string temp_el;
        static string temp2_el;


        public static void Main(string[] args)
        {
            Start();
        }

        static void Start()
        {
            numeri_letti = new ArrayList();
            operatori = new ArrayList();
            number = "";


            read = Console.ReadLine();

            Genera_operazione();

            Operazione();

            Fine_operazione();
        }

        static void Fine_operazione()
        {
            Console.WriteLine("Write Q or q to quit or any other to continue");
            try
            {
                char read = Convert.ToChar(Console.ReadLine());
                if (read == 'q' || read == 'Q') Uscita(); else Start();
            }
            catch (Exception c)
            {
                Console.WriteLine("Reimmetti operazione");
                Start();
            }
        }

        static void Uscita()
        {
            Console.ReadKey();
        }

        static void Genera_operazione()
        {
            int i = 0;

            for (i = 0; i < read.Length; i++)
            {
                if (Char.IsDigit(read[i]))
                {
                    number += read[i];
                }
                else if (read[i] == '+' || read[i] == '-' || read[i] == '*' || read[i] == 'x' || read[i] == ':' || read[i] == '/')
                {
                    operatori.Add(read[i]);
                    if (number != "")
                    {
                        numeri_letti.Add(number);
                        number = "";
                    }
                }
                else if (Char.IsWhiteSpace(read[i]))
                {
                    if (number != "")
                    {
                        numeri_letti.Add(number);
                        number = "";
                    }
                }
            }

            if (i == read.Length)
            {
                numeri_letti.Add(number);
                number = "";
            }
        }

        static void Operazione()
        {
            risultato = 0;
            primo = 0;
            temp = 0;
            temp2 = 0;
            op = '0';
            op2 = '0';
            op3 = '0';

            if (operatori.Count > 0)
            {
                op_el = (char)operatori[0];
                op = Convert.ToChar(op_el);

                if (operatori.Count > 1)
                {
                    op2_el = (char)operatori[1];
                    op2 = Convert.ToChar(op2_el);
                }
                if (operatori.Count > 2)
                {
                    op3_el = (char)operatori[2];
                    op3 = Convert.ToChar(op3_el);
                }
            }

            if (numeri_letti.Count > 1)
            {
                primo_el = (string)numeri_letti[0];
                temp_el = (string)numeri_letti[1];
                primo = Convert.ToDouble(primo_el);
                temp = Convert.ToDouble(temp_el);
                if (numeri_letti.Count > 2)
                {
                    temp2_el = (string)numeri_letti[2];
                    temp2 = Convert.ToDouble(temp2_el);
                }
            }

            if (op == '+')
            {
                risultato = primo + temp;
                if (operatori.Count > 1) oper2();
            }

            else if (op == '-')
            {
                risultato = primo - temp;
                if (operatori.Count > 1) oper2();
            }

            else if (op == '*' || op == 'x')
            {
                risultato = primo * temp;
                if (operatori.Count > 1) oper2();
            }

            else if (op == '/' || op == ':')
            {
                risultato = primo / temp;
                if (operatori.Count > 1) oper2();
            }

            Console.WriteLine(risultato);
        }

        static void oper2()
        {
            if ((op == '+') && (op2 == op)) risultato = risultato + temp2; // case n1 + n2 + n3
            else if ((op == '+') && (op2 == '-')) risultato = primo + temp - temp2; // case n1 + n2 - n3
            else if ((op == '+') && (op2 == '*' || op2 == 'x')) risultato = primo + (temp * temp2); // case n1 + n2 * n3
            else if ((op == '+') && (op2 == '/' || op2 == ':')) risultato = primo + (temp / temp2); // case n1 + n2 / n3
            else if ((op == '-') && (op2 == op)) risultato = risultato - temp2; // case n1 - n2 - n3
            else if ((op == '-') && (op2 == '+')) risultato = primo - temp + temp2; // case n1 - n2 + n3
            else if ((op == '-') && (op2 == '*' || op2 == 'x')) risultato = primo - (temp * temp2); // case n1 - n2 * n3
            else if ((op == '-') && (op2 == '/' || op2 == ':')) risultato = primo - (temp / temp2); // case n1 - n2 / n3
            else if ((op2 == '*' || op2 == 'x') && op == op2) risultato = risultato * temp2; // case n1 * n2 * n3
            else if ((op == '*' || op == 'x') && (op2 == '+' || op2 == '-')) risultato = (primo * temp) + temp2; // case n1 * n2 + n3
            else if ((op == '*' || op == 'x') && (op2 == '-')) risultato = (primo * temp) - temp2; // case n1 * n2 - n3
            else if ((op == '*' || op == 'x') && (op2 == ':' || op2 =='/')) risultato = primo * temp / temp2; // case n1 * n2 / n3
            else if ((op == ':' || op == '/') && (op2 == op)) risultato = risultato / temp2; // case n1 / n2 / n3
            else if ((op == ':' || op == '/') && (op2 == '+')) risultato = (primo / temp) + temp2; // case n1 / n2 + n3
            else if ((op == ':' || op == '/') && (op2 == '-')) risultato = (primo / temp) - temp2; // case n1 / n2 - n3
            else if ((op == ':' || op == '/') && (op2 == '*' || op2 == 'x')) risultato = primo / temp * temp2; // case n1 / n2 * n3

            if (operatori.Count > 2)
            {
                if ((op == op2) && (op2 == op3) && (op == '*' || op == 'x')) risultato = risultato * Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 * n3 * n4
                else if ((op == '+') && (op2 == '*' || op2 == 'x') && (op3 == op2)) risultato = primo + (temp * temp2 * Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 + n2 * n3 * n4
                else if ((op == '+') && (op2 == '*' || op2 == 'x') && (op3 == ':' || op3 == '/')) risultato = primo + (temp * temp2 / Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 + n2 * n3 / n4
                else if ((op == '+') && (op2 == '/' || op2 == ':') && (op3 == 'x' || op3 == '*')) risultato = primo + (temp / temp2 * Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 + n2 / n3 * n4
                else if ((op == '+') && (op2 == '/' || op2 == ':') && (op3 == op2)) risultato = primo + (temp / temp2 / Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 + n2 / n3 / n4
                else if ((op2 == op3) && op == '+' && (op2 == '-')) risultato = primo + temp - temp2 - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 + n2 - n3 - n4
                else if ((op == '-') && (op2==op3) && (op2 == '*' || op2 == 'x')) risultato = primo - (temp * temp2 * Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 - n2 * n3 * n4
                else if ((op == '-') && (op2 == '*' || op2 == 'x') && (op3 == ':' || op3 == '/')) risultato = primo - (temp * temp2 / Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 - n2 * n3 / n4
                else if ((op == '-') && (op2 == '/' || op2 == ':') && (op3 == 'x' || op3 == '*')) risultato = primo - (temp / temp2 * Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 - n2 / n3 * n4
                else if ((op == '-') && (op2 == '/' || op2 == ':') && (op3 == op2)) risultato = primo - (temp / temp2 / Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 - n2 / n3 / n4
                else if ((op == op2) && (op2 == op3) && (op == ':' || op == '/')) risultato = risultato / Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 / n3 / n4
                else if ((op == op2) && (op2 == op3) && op == '-') risultato = risultato - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 - n2 - n3 - n4
                else if ((op == op2) && (op2 == op3) && op == '+') risultato = risultato + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 + n2 + n3 + n4
                else if ((op == op2) && op == '+' && (op3 == '*' || op3 == 'x')) risultato = primo + temp + (temp2 * Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 + n2 + n3 * n4
                else if ((op == op2) && op == '+' && (op3 == '/' || op3 == '/')) risultato = primo + temp + (temp2 / Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 + n2 + n3 / n4
                else if ((op == op2) && op == '+' && (op3 == '-')) risultato = primo + temp + temp2 - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 + n2 + n3 - n4
                else if ((op == op2) && op == '-' && (op3 == ':' || op3 == '/')) risultato = primo - temp - (temp2 / Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 - n2 - n3 / n4
                else if ((op == op2) && op == '-' && (op3 == '*' || op3 == 'x')) risultato = primo - temp - (temp2 * Convert.ToDouble(numeri_letti[numeri_letti.Count - 1])); // case n1 - n2 - n3 * n4
                else if ((op == op3) && op == '-' && (op2 == '+')) risultato = primo - temp + temp2 - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 - n2 + n3 - n4
                else if ((op == op3) && op == '-' && (op2 == ':' || op2 == '/')) risultato = primo - (temp / temp2) - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 - n2 / n3 - n4
                else if ((op == op3) && op == '-' && (op2 == 'x' || op2 == '*')) risultato = primo - (temp * temp2) - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 - n2 * n3 - n4
                else if ((op == op3) && op == '+' && (op2 == '-')) risultato = primo + temp - temp2 + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 + n2 - n3 + n4
                else if ((op == 'x' || op == '*') && (op2 == '-') && (op3 == op2)) risultato = (primo * temp) - temp2 - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 - n3 - n4
                else if ((op == 'x' || op == '*') && (op2 == '-') && (op3 == '+')) risultato = (primo * temp) - temp2 + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 - n3 + n4
                else if ((op == 'x' || op == '*') && (op2 == op) && (op3 == '+')) risultato = (primo * temp * temp2) + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 * n3 + n4
                else if ((op == 'x' || op == '*') && (op2 == op) && (op3 == '+')) risultato = (primo * temp * temp2) - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 * n3 - n4
                else if ((op == 'x' || op == '*') && (op2 == '+') && (op3 == op2)) risultato = (primo * temp) + temp2 + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 + n3 + n4
                else if ((op == 'x' || op == '*') && (op2 == '+') && (op3 == '-')) risultato = (primo * temp) + temp2 - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 + n3 - n4
                else if ((op == 'x' || op == '*') && (op2 == '/'||op2 ==':') && (op3 == '+')) risultato = (primo * temp / temp2) + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 / n3 + n4
                else if ((op == 'x' || op == '*') && (op2 == '/'||op2 ==':') && (op3 == '-')) risultato = (primo * temp / temp2) - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 / n3 - n4
                else if ((op == 'x' || op == '*') && (op2 == op) && (op3 == ':'||op3 == '/')) risultato = primo * temp * temp2 / Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 * n2 * n3 / n4
                else if ((op == '/' || op == ':') && (op2 == '-') && (op3 == op2)) risultato = (primo / temp) - temp2 - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 - n3 - n4
                else if ((op == '/' || op == ':') && (op2 == '-') && (op3 == '+')) risultato = (primo / temp) - temp2 + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 - n3 + n4
                else if ((op == '/' || op == ':') && (op2 == op) && (op3 == '+')) risultato = (primo / temp * temp2) + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 * n3 + n4
                else if ((op == '/' || op == ':') && (op2 == op) && (op3 == '+')) risultato = (primo / temp * temp2) - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 * n3 - n4
                else if ((op == '/' || op == ':') && (op2 == '+') && (op3 == op2)) risultato = (primo / temp) + temp2 + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 + n3 + n4
                else if ((op == '/' || op == ':') && (op2 == '+') && (op3 == '-')) risultato = (primo / temp) + temp2 - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 + n3 - n4
                else if ((op == '/' || op == ':') && (op2 == op) && (op3 == '+')) risultato = (primo / temp / temp2) + Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 / n3 + n4
                else if ((op == '/' || op == ':') && (op2 == op) && (op3 == '-')) risultato = (primo / temp / temp2) - Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 / n3 - n4
                else if ((op == '/' || op == ':') && (op2 == op) && (op3 == '*' || op3 == 'x')) risultato = primo / temp / temp2 * Convert.ToDouble(numeri_letti[numeri_letti.Count - 1]); // case n1 / n2 / n3 * n4
            }
        }
    }
}
